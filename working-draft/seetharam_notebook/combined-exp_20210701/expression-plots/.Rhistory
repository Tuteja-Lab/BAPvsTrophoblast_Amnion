p_load(ape)
p_load(enrichR)
knitr::opts_chunk$set(
echo = TRUE,
collapse = TRUE,
comment = "#>",
fig.path = "assets/"
)
setwd("~/TutejaLab/combined-exp_20210529")
# load the modules
library(Seurat)
library(knitr)
library(kableExtra)
library(ggplot2)
library(cowplot)
library(patchwork)
library(metap)
library(multtest)
library(gridExtra)
library(dplyr)
library(stringr)
library(TissueEnrich)
library(gprofiler2)
library(tidyverse)
library(enhancedDimPlot)
library(calibrate)
library(ggrepel)
library(dittoSeq)
library(ComplexHeatmap)
library(scales)
library(ggvenn)
library(plotly)
library(DT)
library(cerebroApp)
library(ape)
library(enrichR)
library(SeuratWrappers)
experiment_name = "BAP"
dataset_loc <- "X:/Documents/snRNAseq-placenta-project/expression-data"
ids <- c("5pcO2_r1", "5pcO2_r2", "20pcO2_r1", "20pcO2_r2", "nCT_D5", "nCT_D10", "nTE_D2", "nTE_D3")
# function d10x.data
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"), '[[' , 1L ), i, sep="-")
d10x
})
experiment_name = "BAP"
dataset_loc <- "~/TutejaLab/expression-data"
ids <- c("5pcO2_r1", "5pcO2_r2", "20pcO2_r1", "20pcO2_r2", "nCT_D5", "nCT_D10", "nTE_D2", "nTE_D3")
# function d10x.data
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"), '[[' , 1L ), i, sep="-")
d10x
})
experiment.data <- do.call("cbind", d10x.data)
bapd8.combined <- CreateSeuratObject(
experiment.data,
project = "BAPd8",
min.cells = 10,
min.genes = 200,
names.field = 2,
names.delim = "\\-")
# backup the object
bapd8.temp <- bapd8.combined
bapd8.combined$log10GenesPerUMI <- log10(bapd8.combined$nFeature_RNA) / log10(bapd8.combined$nCount_RNA)
bapd8.combined$mitoRatio <- PercentageFeatureSet(object = bapd8.combined, pattern = "^MT-")
bapd8.combined$mitoRatio <- bapd8.combined@meta.data$mitoRatio / 100
metadata <- bapd8.combined@meta.data
metadata$cells <- rownames(metadata)
metadata <- metadata %>%
dplyr::rename(seq_folder = orig.ident,
nUMI = nCount_RNA,
nGene = nFeature_RNA,
seq_folder = orig.ident)
p <- ggplot(dat = metadata, aes(x=nUMI, y=nGene, color=mitoRatio)) +
geom_point(alpha = 0.5) +
scale_colour_gradient(low = "gray90", high = "black") + labs(colour="MT ratio") +
theme_bw(base_size = 12) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(colour = "black")) +
xlab("RNA counts") + ylab("Gene counts") +
stat_smooth(method=lm) +
facet_wrap(~seq_folder, labeller = labeller(seq_folder =
c("20pcO2_r1" = "20% Oxygen (rep1)",
"20pcO2_r2" = "20% Oxygen (rep2)",
"5pcO2_r1" = "5% Oxygen (rep1)",
"5pcO2_r2" = "5% Oxygen (rep2)",
"nCT_D5" = "CT day 5",
"nCT_D10" = "CT day 5",
"nTE_D2" = "TE day 2",
"nTE_D3" = "TE day 3"))) +
scale_y_continuous(label=comma) +
scale_x_continuous(label=comma)
ggplotly(p)
ggplot(metadata, aes(x=seq_folder, fill=seq_folder)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust=0.5, face="bold")) +
ggtitle("Number of Nuclei")
ggplot(metadata, aes(color=seq_folder, x=nUMI, fill= seq_folder)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
ylab("Cell density") +
geom_vline(xintercept = 500)
ggplot(metadata, aes(x=seq_folder, y=log10(nGene), fill=seq_folder)) +
geom_boxplot() +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust=0.5, face="bold")) +
ggtitle("NNuclei vs NGenes")
ggplot(metadata, aes(x=log10GenesPerUMI, color = seq_folder, fill=seq_folder)) +
geom_density(alpha = 0.2) +
theme_classic() +
geom_vline(xintercept = 0.8)
ggplot(metadata, aes(color=seq_folder, x=mitoRatio, fill=seq_folder)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 0.2)
bapd8.combined <- bapd8.temp
df <- bapd8.combined@meta.data
df$replicate <- NA
df$replicate[which(str_detect(df$orig.ident, "5pcO2"))] <- "5pcO2"
df$replicate[which(str_detect(df$orig.ident, "20pcO2"))] <- "20pcO2"
bapd8.combined@meta.data <- df
bapd8.combined[["percent.mt"]] <- PercentageFeatureSet(bapd8.combined, pattern = "^MT-")
datatable(bapd8.combined@meta.data, rownames = TRUE, filter="top", options = list(pageLength = 15, scrollX=T) )
v1 <- VlnPlot(bapd8.combined, features = "nFeature_RNA", pt.size = 1) +
geom_hline(yintercept=200, color = "red", size=1) +
geom_hline(yintercept=7500, color = "red", size=1) +
theme(legend.position = "none")
v2 <- VlnPlot(bapd8.combined, features = "nCount_RNA", pt.size = 1) +
theme(legend.position = "none")
v3 <- VlnPlot(bapd8.combined, features = "percent.mt", pt.size = 1) +
geom_hline(yintercept=15, color = "red", size=1) +
theme(legend.position = "none")
v1 | v2 | v3
B1 <- FeatureScatter(bapd8.combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
B2 <- FeatureScatter(bapd8.combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
B1 | B2
bapd8.combined <- subset(bapd8.combined, subset = nFeature_RNA > 200 & nFeature_RNA < 7500 & percent.mt < 25)
I1 <- FeatureScatter(bapd8.combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
I2 <- FeatureScatter(bapd8.combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
I1 | I2
bapd8.combined <- subset(bapd8.combined, subset = nFeature_RNA > 200 & nFeature_RNA < 7500 & percent.mt < 15)
A1 <- FeatureScatter(bapd8.combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
A2 <- FeatureScatter(bapd8.combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
A1 | A2
counts <- GetAssayData(object = bapd8.combined, slot = "counts")
counts <- counts[grep(pattern = "^MT", x = rownames(counts), invert = TRUE),]
counts <- counts[grep(pattern = "^RPL", x = rownames(counts), invert = TRUE),]
counts <- counts[grep(pattern = "^RPS", x = rownames(counts), invert = TRUE),]
counts <- counts[grep(pattern = "^MRPS", x = rownames(counts), invert = TRUE),]
counts <- counts[grep(pattern = "^MRPL", x = rownames(counts), invert = TRUE),]
keep_genes <- Matrix::rowSums(counts) >= 10
filtered_counts <- counts[keep_genes, ]
bapd8.fcombined <- CreateSeuratObject(filtered_counts, meta.data = bapd8.combined@meta.data)
bapd8.fcombined@meta.data <- bapd8.fcombined@meta.data[1:4]
bapd8.combined <- bapd8.fcombined
bapd8.list <- SplitObject(bapd8.combined, split.by = "orig.ident")
bapd8.list <- lapply(X = bapd8.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
bapd8.anchors <- FindIntegrationAnchors(object.list = bapd8.list, dims = 1:20)
bapd8.integrated <- IntegrateData(anchorset = bapd8.anchors, dims = 1:20)
DefaultAssay(bapd8.integrated) <- "integrated"
bapd8.integrated <- ScaleData(bapd8.integrated, verbose = FALSE)
bapd8.integrated <- RunPCA(bapd8.integrated, npcs = 30, verbose = FALSE)
bapd8.integrated <- RunUMAP(bapd8.integrated, reduction = "pca", dims = 1:20)
bapd8.integrated <- FindNeighbors(bapd8.integrated, reduction = "pca", dims = 1:20)
bapd8.integrated <- FindClusters(bapd8.integrated, resolution = 0.5)
num.clusters <- nlevels(bapd8.integrated$seurat_clusters)
df <- bapd8.integrated@meta.data
df$new_clusters <- as.factor(as.numeric(df$seurat_clusters))
bapd8.integrated@meta.data <- df
Idents(bapd8.integrated) <- "new_clusters"
d1 <- enhancedDimPlot(object = bapd8.integrated, grouping_var = 'ident', reduction = "umap", label = TRUE, pt.size = 1, alpha = 0.5) +
ggtitle("A") + xlab("UMAP_1") + ylab("UMAP_2") +
theme_classic() +
theme(legend.position = "none", plot.title = element_text(face = "bold"))
ggplotly(d1)
d2 <- enhancedDimPlot(object = bapd8.integrated, grouping_var = 'replicate', reduction = "umap", label = FALSE, pt.size = 1, alpha = 0.4) +
ggtitle("B") +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(legend.justification = c(1, 1), legend.position = c(1, 1), plot.title = element_text(face = "bold")) +
scale_colour_manual(name = "Conditions",
labels = c(expression(paste('20% ', 'O'[2])), expression(paste('5% ', 'O'[2]))),
values = c("20pcO2" = "#0571b0", "5pcO2" = "#ca0020")) +
scale_fill_manual(name = "Conditions",
labels = c(expression(paste('20% ', 'O'[2])), expression(paste('5% ', 'O'[2]))),
values = c("20pcO2" = "#0571b0", "5pcO2" = "#ca0020")) +
scale_linetype_manual(values = "blank")
ggplotly(d2)
d3 <- enhancedDimPlot(object = bapd8.integrated, grouping_var = 'orig.ident', reduction = "umap", label = FALSE, pt.size = 1, alpha = 0.4) +
ggtitle("C") +
xlab("UMAP_1") +
ylab("UMAP_2") +
theme_classic() +
theme(legend.justification = c(1, 1), legend.position = c(1, 1), plot.title = element_text(face = "bold")) +
scale_colour_manual(name = "Replicates",
labels = c(expression(paste('20% ', 'O'[2], ' rep1')), expression(paste('20% ', 'O'[2], ' rep2')), expression(paste('5% ', 'O'[2], ' rep1')), expression(paste('5% ', 'O'[2], ' rep1'))),
values = c("20pcO2_r1" = "#0571b0", "20pcO2_r2" = "#92c5de", "5pcO2_r1" = "#ca0020", "5pcO2_r2" = "#f4a582")) +
scale_fill_manual(name = "Replicates",
labels = c(expression(paste('20% ', 'O'[2], ' rep1')), expression(paste('20% ', 'O'[2], ' rep2')), expression(paste('5% ', 'O'[2], ' rep1')), expression(paste('5% ', 'O'[2], ' rep1'))),
values = c("20pcO2_r1" = "#0571b0", "20pcO2_r2" = "#92c5de", "5pcO2_r1" = "#ca0020", "5pcO2_r2" = "#f4a582")) +
scale_linetype_manual(values = "blank")
ggplotly(d3)
memory.limit()
setwd("~/TutejaLab/combined-exp_20210701/expression-plots")
# load packages
library(sva)
library(tidyverse)
library(DESeq2)
library(vsn)
library(pheatmap)
library(ggrepel)
library(RColorBrewer)
library(reshape2)
require(biomaRt)
library(EnhancedVolcano)
library(TissueEnrich)
# read counts and batch files
counts = 'lineage-counts-genes.txt'
groupFile = 'batch.txt'
coldata <- read.csv(groupFile, row.names=1, sep="\t", stringsAsFactors = TRUE)
cts <- as.matrix(read.csv(counts,sep="\t",row.names="geneids"))
# inspect
head(cts)
colnames(cts)
# check to make sure all rows of counts and batch have the names
all(rownames(coldata) %in% colnames(cts))
# and arrange in the same order
cts <- cts[, rownames(coldata)]
# read in the project info for libraries
# create DESeq2 object with design as condition
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ group)
# vst for pca (not needed here actually)
vsd <- vst(dds, blind=FALSE)
# keep genes with counts >= 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds, maxit=500)
# inspect
dds
normalized_counts <- counts(dds, normalized=T) %>%
data.frame() %>%
rownames_to_column(var="gene")
normalized_counts$gene <- str_replace_all(normalized_counts$gene, pattern=" ", repl="")
# convert to tibble
normalized_counts <- normalized_counts %>%
as_tibble()
file1 <- "cluster-6-and-8-SCT.txt"
file2 <- "cluster-6-only-SCT.txt"
file3 <- "cluster-8-only-SCT.txt"
c68.sct <- read.csv(file1, sep="\t", header = TRUE, stringsAsFactors = FALSE)
c06.sct <- read.csv(file2, sep="\t", header = TRUE, stringsAsFactors = FALSE)
c08.sct <- read.csv(file3, sep="\t", header = TRUE, stringsAsFactors = FALSE)
genes.c68.sct  = c68.sct$genes
genes.c06.sct  = c06.sct$genes
genes.c08.sct  = c08.sct$genes
# biomart table
attributes=c('ensembl_gene_id_version','hgnc_symbol')
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
# genes.c68.sct
G_list<- getBM(attributes=attributes, filters="hgnc_symbol",values=genes.c68.sct, mart=mart, uniqueRows=T)
head(G_list)
norm_selected <- normalized_counts %>%
dplyr::filter(gene %in% G_list$ensembl_gene_id_version)
norm.selected.long <- melt(norm_selected, id.vars="gene")
norm.selected.long <- merge(norm.selected.long, G_list,
by.x = "gene",
by.y = "ensembl_gene_id_version",
all.x = TRUE,
all.y = FALSE)
head(norm.selected.long)
colnames(norm.selected.long) <- c("gene", "condition", "norm.expression", "gene_symbol")
norm.selected.long$days <- NA
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D10"))] <- "D10"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D12"))] <- "D12"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D8"))] <- "D8"
norm.selected.long$cell <- NA
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_L"))] <- "STB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_S"))] <- "CTB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_EVT"))] <- "EVT"
norm.selected.long$cell[which(is.na(norm.selected.long$cell))] <- "STB"
norm.selected.long$type <- paste(norm.selected.long$days, ".", norm.selected.long$cell, sep = "")
goi <- unique(norm.selected.long$hgnc_symbol)
pdf("genes_in_both_cluster_6-and-8.pdf")
for (i in goi) {
p <- ggplot(filter(norm.selected.long, hgnc_symbol== i), aes(type, value, fill=cell)) +
geom_violin() + geom_jitter(shape=16, position=position_jitter(0.1)) +
ggtitle(i) +
xlab("cell types") +
ylab("normalized expression") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14))
print(p)
}
dev.off()
norm.selected.wide <- dcast(norm.selected.long, hgnc_symbol ~ variable, value.var="value")
write_delim(norm.selected.wide, file="genes_in_both_cluster_6-and-8-SCT-normalized.tsv", delim = "\t")
hmap <- norm.selected.wide[,-1]
row.names(hmap) <- norm.selected.wide[,1]
annotation <- read.csv("annotation.tsv", sep="\t", stringsAsFactors = TRUE, row.names="names")
heat_colors <- brewer.pal(9, "YlOrRd")
all(rownames(annotation) %in% colnames(hmap))
hmap <- hmap[, rownames(annotation)]
g <- pheatmap(hmap,
color = heat_colors,
cluster_rows = T,
show_rownames = T,
annotation_col = annotation,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10,
height = 20)
ggsave("genes_in_both_cluster_6-and-8_heatmap.png", g, dpi=900, width = 28, height = 12)
# genes.c06.sct
G_list<- getBM(attributes=attributes, filters="hgnc_symbol",values=genes.c06.sct, mart=mart, uniqueRows=T)
head(G_list)
norm_selected <- normalized_counts %>%
dplyr::filter(gene %in% G_list$ensembl_gene_id_version)
norm.selected.long <- melt(norm_selected, id.vars="gene")
norm.selected.long <- merge(norm.selected.long, G_list,
by.x = "gene",
by.y = "ensembl_gene_id_version",
all.x = TRUE,
all.y = FALSE)
head(norm.selected.long)
norm.selected.long$days <- NA
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D10"))] <- "D10"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D12"))] <- "D12"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D8"))] <- "D8"
norm.selected.long$cell <- NA
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_L"))] <- "STB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_S"))] <- "CTB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_EVT"))] <- "EVT"
norm.selected.long$cell[which(is.na(norm.selected.long$cell))] <- "STB"
norm.selected.long$type <- paste(norm.selected.long$days, ".", norm.selected.long$cell, sep = "")
goi <- unique(norm.selected.long$hgnc_symbol)
pdf("genes_unique_to_cluster_6-SCT.pdf")
for (i in goi) {
p <- ggplot(filter(norm.selected.long, hgnc_symbol== i), aes(type, value, fill=cell)) +
geom_violin() + geom_jitter(shape=16, position=position_jitter(0.1)) +
ggtitle(i) +
xlab("cell types") +
ylab("normalized expression") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14))
print(p)
}
dev.off()
norm.selected.wide <- dcast(norm.selected.long, hgnc_symbol ~ variable, value.var="value")
write_delim(norm.selected.wide, file="genes_unique_to_cluster_6-SCT-normalized.tsv", delim = "\t")
hmap <- norm.selected.wide[,-1]
row.names(hmap) <- norm.selected.wide[,1]
annotation <- read.csv("annotation.tsv", sep="\t", stringsAsFactors = TRUE, row.names="names")
heat_colors <- brewer.pal(9, "YlOrRd")
all(rownames(annotation) %in% colnames(hmap))
hmap <- hmap[, rownames(annotation)]
g <- pheatmap(hmap,
color = heat_colors,
cluster_rows = T,
show_rownames = T,
annotation_col = annotation,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10,
height = 20)
ggsave("genes_unique_to_cluster_6-SCT_heatmap.png", g, dpi=900, width = 28, height = 12)
# genes.c08.sct
G_list<- getBM(attributes=attributes, filters="hgnc_symbol",values=genes.c08.sct, mart=mart, uniqueRows=T)
head(G_list)
norm_selected <- normalized_counts %>%
dplyr::filter(gene %in% G_list$ensembl_gene_id_version)
norm.selected.long <- melt(norm_selected, id.vars="gene")
norm.selected.long <- merge(norm.selected.long, G_list,
by.x = "gene",
by.y = "ensembl_gene_id_version",
all.x = TRUE,
all.y = FALSE)
head(norm.selected.long)
norm.selected.long$days <- NA
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D10"))] <- "D10"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D12"))] <- "D12"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D8"))] <- "D8"
norm.selected.long$cell <- NA
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_L"))] <- "STB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_S"))] <- "CTB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_EVT"))] <- "EVT"
norm.selected.long$cell[which(is.na(norm.selected.long$cell))] <- "STB"
norm.selected.long$type <- paste(norm.selected.long$days, ".", norm.selected.long$cell, sep = "")
goi <- unique(norm.selected.long$hgnc_symbol)
pdf("genes_unique_to_cluster_8-SCT.pdf")
for (i in goi) {
p <- ggplot(filter(norm.selected.long, hgnc_symbol== i), aes(type, value, fill=cell)) +
geom_violin() + geom_jitter(shape=16, position=position_jitter(0.1)) +
ggtitle(i) +
xlab("cell types") +
ylab("normalized expression") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14))
print(p)
}
dev.off()
norm.selected.wide <- dcast(norm.selected.long, hgnc_symbol ~ variable, value.var="value")
write_delim(norm.selected.wide, file="genes_unique_to_cluster_8-SCT-normalized.tsv", delim = "\t")
hmap <- norm.selected.wide[,-1]
row.names(hmap) <- norm.selected.wide[,1]
annotation <- read.csv("annotation.tsv", sep="\t", stringsAsFactors = TRUE, row.names="names")
heat_colors <- brewer.pal(9, "YlOrRd")
all(rownames(annotation) %in% colnames(hmap))
hmap <- hmap[, rownames(annotation)]
g <- pheatmap(hmap,
color = heat_colors,
cluster_rows = T,
show_rownames = T,
annotation_col = annotation,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10,
height = 20)
ggsave("genes_unique_to_cluster_8-SCT_heatmap.png", g, dpi=900, width = 28, height = 12)
G_list<- getBM(attributes=attributes, filters="hgnc_symbol",values=genes.c68.sct, mart=mart, uniqueRows=T)
head(G_list)
norm_selected <- normalized_counts %>%
dplyr::filter(gene %in% G_list$ensembl_gene_id_version)
norm.selected.long <- melt(norm_selected, id.vars="gene")
norm.selected.long <- merge(norm.selected.long, G_list,
by.x = "gene",
by.y = "ensembl_gene_id_version",
all.x = TRUE,
all.y = FALSE)
head(norm.selected.long)
norm.selected.long$days <- NA
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D10"))] <- "D10"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D12"))] <- "D12"
norm.selected.long$days[which(str_detect(norm.selected.long$variable, "D8"))] <- "D8"
norm.selected.long$cell <- NA
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_L"))] <- "STB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_S"))] <- "CTB"
norm.selected.long$cell[which(str_detect(norm.selected.long$variable, "_EVT"))] <- "EVT"
norm.selected.long$cell[which(is.na(norm.selected.long$cell))] <- "STB"
norm.selected.long$type <- paste(norm.selected.long$days, ".", norm.selected.long$cell, sep = "")
goi <- unique(norm.selected.long$hgnc_symbol)
pdf("genes_in_both_cluster_6-and-8.pdf")
for (i in goi) {
p <- ggplot(filter(norm.selected.long, hgnc_symbol== i), aes(type, value, fill=cell)) +
geom_violin() + geom_jitter(shape=16, position=position_jitter(0.1)) +
ggtitle(i) +
xlab("cell types") +
ylab("normalized expression") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14))
print(p)
}
dev.off()
norm.selected.wide <- dcast(norm.selected.long, hgnc_symbol ~ variable, value.var="value")
write_delim(norm.selected.wide, file="genes_in_both_cluster_6-and-8-SCT-normalized.tsv", delim = "\t")
hmap <- norm.selected.wide[,-1]
row.names(hmap) <- norm.selected.wide[,1]
annotation <- read.csv("annotation.tsv", sep="\t", stringsAsFactors = TRUE, row.names="names")
heat_colors <- brewer.pal(9, "YlOrRd")
all(rownames(annotation) %in% colnames(hmap))
hmap <- hmap[, rownames(annotation)]
g <- pheatmap(hmap,
color = heat_colors,
cluster_rows = T,
show_rownames = T,
annotation_col = annotation,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10,
height = 20)
ggsave("genes_in_both_cluster_6-and-8_heatmap.png", g, dpi=900, width = 28, height = 12)
