en.output.zp$Tissue <- rownames(en.output.zp)
en.output.zp$source <- "ZP"
en.output.zp <- en.output.zp[order(-en.output.zp$Log10PValue), ]
en.output.zp <-
merge(en.output.zp, zp.md, by = "row.names", all.x = TRUE)
en.output.zp <- rownames_to_column(en.output.zp, var = "Name")
output.ro <- teEnrichmentCustom(gs1, te.dataset.ro)
en.output.ro <-
setNames(data.frame(assay(output.ro[[1]]), row.names = rowData(output.ro[[1]])[, 1]),
colData(output.ro[[1]])[, 1])
en.output.ro$Tissue <- rownames(en.output.ro)
en.output.ro$source <- "Ro"
en.output.ro <- en.output.ro[order(-en.output.ro$Log10PValue), ]
en.output.ro <-
merge(en.output.ro, ro.md, by = "row.names", all.x = TRUE)
#  colnames(en.output.ro) <- c("Name", "Log10PValue", "Tissue.Specific.Genes", "fold.change", "Tissue", "source", "CellNames")
en.output.ro <- rownames_to_column(en.output.ro, var = "Name")
en.conbined <- rbind(en.output.vt, en.output.xi, en.output.zp, en.output.ro)
#  p <- 0.05
#  logp <- -log10(p)
en.conbined <-  en.conbined %>%
#    mutate(Log10PValue = replace(Log10PValue, Log10PValue < logp, 0))
#  en.conbined %>%
group_by(source) %>%
arrange(source, desc(Log10PValue)) %>% dplyr::slice(1:7)  %>%
ungroup %>%
mutate(
source = as.factor(source),
CellNames = tidytext::reorder_within(CellNames, Log10PValue, source, sep = ":")
)
# write.table(en.conbined,
#             file = paste0("cluster_", filename, ".tsv"))
g <-
ggplot(en.conbined, aes(CellNames, Log10PValue)) +
geom_bar(stat = 'identity', fill = barcolor) +
labs(x = "", y = "-log10(adj. p value)") +
theme_clean() +
ggtitle(ChartTitle) +
theme(legend.position = "none",
axis.title.y = element_blank()
) +
scale_y_continuous(expand = expansion(mult = c(0, .1)), breaks = pretty_breaks()) +
facet_wrap( ~ source, scales = "free", ncol = 2) +
coord_flip()
ggsave(paste0("PCE_", filename, ".", clusternumber, ".png"),
g,
dpi = 900,
width = 12,
height = 8
)
return(g)
}
a <-
run.all.PCE(
PH9vsBAP.dw.pce1,
PH9vsBAP.dw.pce2,
"PH9vsBAP.down_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
run.all.PCE <- function(geneList1, geneList2, filename, ChartTitle, barcolor) {
inputGenes <- unique(toupper(geneList2))
gs1 <- GeneSet(geneIds = inputGenes)
humanGene <-
humanGeneMapping[humanGeneMapping$Gene.name %in% inputGenes,]
inputGenes <- humanGene$Gene
expressionData <-
data[intersect(row.names(data), humanGeneMapping$Gene),]
se <-
SummarizedExperiment(
assays = SimpleList(as.matrix(expressionData)),
rowData = row.names(expressionData),
colData = colnames(expressionData)
)
cellSpecificGenesExp <-
teGeneRetrieval(se, expressedGeneThreshold = 1)
gs <- GeneSet(geneIds = toupper(inputGenes))
output.vt <- teEnrichmentCustom(gs, cellSpecificGenesExp)
en.output.vt <-
setNames(data.frame(assay(output.vt[[1]]), row.names = rowData(output.vt[[1]])[, 1]),
colData(output.vt[[1]])[, 1])
row.names(cellDetails) <- cellDetails$RName
en.output.vt$Tissue <-
cellDetails[row.names(en.output.vt), "CellName"]
en.output.vt$source <- "VT"
en.output.vt <- en.output.vt[order(-en.output.vt$Log10PValue), ]
en.output.vt <-
merge(en.output.vt, vt.md, by = "row.names", all.x = TRUE)
en.output.vt <- rownames_to_column(en.output.vt, var = "Name")
output.xi <- teEnrichmentCustom(gs1, te.dataset.xiang)
en.output.xi <-
setNames(data.frame(assay(output.xi[[1]]), row.names = rowData(output.xi[[1]])[, 1]),
colData(output.xi[[1]])[, 1])
en.output.xi$Tissue <- rownames(en.output.xi)
en.output.xi$source <- "Xi"
en.output.xi <- en.output.xi[order(-en.output.xi$Log10PValue), ]
en.output.xi <-
merge(en.output.xi, xi.md, by = "row.names", all.x = TRUE)
en.output.xi <- rownames_to_column(en.output.xi, var = "Name")
output.zp <- teEnrichmentCustom(gs1, te.dataset.castel)
en.output.zp <-
setNames(data.frame(assay(output.zp[[1]]), row.names = rowData(output.zp[[1]])[, 1]),
colData(output.zp[[1]])[, 1])
en.output.zp$Tissue <- rownames(en.output.zp)
en.output.zp$source <- "ZP"
en.output.zp <- en.output.zp[order(-en.output.zp$Log10PValue), ]
en.output.zp <-
merge(en.output.zp, zp.md, by = "row.names", all.x = TRUE)
en.output.zp <- rownames_to_column(en.output.zp, var = "Name")
output.ro <- teEnrichmentCustom(gs1, te.dataset.ro)
en.output.ro <-
setNames(data.frame(assay(output.ro[[1]]), row.names = rowData(output.ro[[1]])[, 1]),
colData(output.ro[[1]])[, 1])
en.output.ro$Tissue <- rownames(en.output.ro)
en.output.ro$source <- "Ro"
en.output.ro <- en.output.ro[order(-en.output.ro$Log10PValue), ]
en.output.ro <-
merge(en.output.ro, ro.md, by = "row.names", all.x = TRUE)
#  colnames(en.output.ro) <- c("Name", "Log10PValue", "Tissue.Specific.Genes", "fold.change", "Tissue", "source", "CellNames")
en.output.ro <- rownames_to_column(en.output.ro, var = "Name")
en.conbined <- rbind(en.output.vt, en.output.xi, en.output.zp, en.output.ro)
#  p <- 0.05
#  logp <- -log10(p)
en.conbined <-  en.conbined %>%
#    mutate(Log10PValue = replace(Log10PValue, Log10PValue < logp, 0))
#  en.conbined %>%
group_by(source) %>%
arrange(source, desc(Log10PValue)) %>% dplyr::slice(1:7)  %>%
ungroup %>%
mutate(
source = as.factor(source),
CellNames = tidytext::reorder_within(CellNames, Log10PValue, source, sep = ":")
)
# write.table(en.conbined,
#             file = paste0("cluster_", filename, ".tsv"))
g <-
ggplot(en.conbined, aes(CellNames, Log10PValue)) +
geom_bar(stat = 'identity', fill = barcolor) +
labs(x = "", y = "-log10(adj. p value)") +
theme_clean() +
ggtitle(ChartTitle) +
theme(legend.position = "none",
axis.title.y = element_blank()
) +
scale_y_continuous(expand = expansion(mult = c(0, .1)), breaks = pretty_breaks()) +
facet_wrap( ~ source, scales = "free", ncol = 2) +
coord_flip()
ggsave(paste0("PCE_", filename, ".", clusternumber, ".png"),
g,
dpi = 900,
width = 12,
height = 8
)
return(g)
}
a <-
run.all.PCE(
PH9vsBAP.dw.pce1,
PH9vsBAP.dw.pce2,
"PH9vsBAP.down_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
run.all.PCE <- function(geneList1, geneList2, filename, ChartTitle, barcolor) {
inputGenes <- unique(toupper(geneList2))
gs1 <- GeneSet(geneIds = inputGenes)
humanGene <-
humanGeneMapping[humanGeneMapping$Gene.name %in% inputGenes,]
inputGenes <- humanGene$Gene
expressionData <-
data[intersect(row.names(data), humanGeneMapping$Gene),]
se <-
SummarizedExperiment(
assays = SimpleList(as.matrix(expressionData)),
rowData = row.names(expressionData),
colData = colnames(expressionData)
)
cellSpecificGenesExp <-
teGeneRetrieval(se, expressedGeneThreshold = 1)
gs <- GeneSet(geneIds = toupper(inputGenes))
output.vt <- teEnrichmentCustom(gs, cellSpecificGenesExp)
en.output.vt <-
setNames(data.frame(assay(output.vt[[1]]), row.names = rowData(output.vt[[1]])[, 1]),
colData(output.vt[[1]])[, 1])
row.names(cellDetails) <- cellDetails$RName
en.output.vt$Tissue <-
cellDetails[row.names(en.output.vt), "CellName"]
en.output.vt$source <- "VT"
en.output.vt <- en.output.vt[order(-en.output.vt$Log10PValue), ]
en.output.vt <-
merge(en.output.vt, vt.md, by = "row.names", all.x = TRUE)
en.output.vt <- rownames_to_column(en.output.vt, var = "Name")
output.xi <- teEnrichmentCustom(gs1, te.dataset.xiang)
en.output.xi <-
setNames(data.frame(assay(output.xi[[1]]), row.names = rowData(output.xi[[1]])[, 1]),
colData(output.xi[[1]])[, 1])
en.output.xi$Tissue <- rownames(en.output.xi)
en.output.xi$source <- "Xi"
en.output.xi <- en.output.xi[order(-en.output.xi$Log10PValue), ]
en.output.xi <-
merge(en.output.xi, xi.md, by = "row.names", all.x = TRUE)
en.output.xi <- rownames_to_column(en.output.xi, var = "Name")
output.zp <- teEnrichmentCustom(gs1, te.dataset.castel)
en.output.zp <-
setNames(data.frame(assay(output.zp[[1]]), row.names = rowData(output.zp[[1]])[, 1]),
colData(output.zp[[1]])[, 1])
en.output.zp$Tissue <- rownames(en.output.zp)
en.output.zp$source <- "ZP"
en.output.zp <- en.output.zp[order(-en.output.zp$Log10PValue), ]
en.output.zp <-
merge(en.output.zp, zp.md, by = "row.names", all.x = TRUE)
en.output.zp <- rownames_to_column(en.output.zp, var = "Name")
output.ro <- teEnrichmentCustom(gs1, te.dataset.ro)
en.output.ro <-
setNames(data.frame(assay(output.ro[[1]]), row.names = rowData(output.ro[[1]])[, 1]),
colData(output.ro[[1]])[, 1])
en.output.ro$Tissue <- rownames(en.output.ro)
en.output.ro$source <- "Ro"
en.output.ro <- en.output.ro[order(-en.output.ro$Log10PValue), ]
en.output.ro <-
merge(en.output.ro, ro.md, by = "row.names", all.x = TRUE)
#  colnames(en.output.ro) <- c("Name", "Log10PValue", "Tissue.Specific.Genes", "fold.change", "Tissue", "source", "CellNames")
en.output.ro <- rownames_to_column(en.output.ro, var = "Name")
en.conbined <- rbind(en.output.vt, en.output.xi, en.output.zp, en.output.ro)
#  p <- 0.05
#  logp <- -log10(p)
en.conbined <-  en.conbined %>%
#    mutate(Log10PValue = replace(Log10PValue, Log10PValue < logp, 0))
#  en.conbined %>%
group_by(source) %>%
arrange(source, desc(Log10PValue)) %>% dplyr::slice(1:7)  %>%
ungroup %>%
mutate(
source = as.factor(source),
CellNames = tidytext::reorder_within(CellNames, Log10PValue, source, sep = ":")
)
# write.table(en.conbined,
#             file = paste0("cluster_", filename, ".tsv"))
g <-
ggplot(en.conbined, aes(CellNames, Log10PValue)) +
geom_bar(stat = 'identity', fill = barcolor) +
labs(x = "", y = "-log10(adj. p value)") +
theme_clean() +
ggtitle(ChartTitle) +
theme(legend.position = "none",
axis.title.y = element_blank()
) +
scale_y_continuous(expand = expansion(mult = c(0, .1)), breaks = pretty_breaks()) +
facet_wrap( ~ source, scales = "free", ncol = 2) +
coord_flip()
ggsave(paste0("PCE_", filename, ".png"),
g,
dpi = 900,
width = 12,
height = 8
)
return(g)
}
a <-
run.all.PCE(
PH9vsBAP.dw.pce1,
PH9vsBAP.dw.pce2,
"PH9vsBAP.down_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
b <-
run.all.PCE(
PH9vsBAP.up.pce1,
PH9vsBAP.up.pce2,
"PH9vsBAP.up_allPCE.v2",
"Overexpressed in pH9_Io",
"#483F8E"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
PH9vsBAP.dw.pce1,
PH9vsBAP.dw.pce2,
"PH9vsBAP.down_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
b <-
run.all.PCE(
PH9vsBAP.up.pce1,
PH9vsBAP.up.pce2,
"PH9vsBAP.up_allPCE.v2",
"Overexpressed in pH9_Io",
"#483F8E"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
PH9vsBAP.dw.pce1,
PH9vsBAP.dw.pce2,
"PH9vsBAP.down_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
b <-
run.all.PCE(
PH9vsBAP.up.pce1,
PH9vsBAP.up.pce2,
"PH9vsBAP.up_allPCE.v2",
"Overexpressed in pH9_Io",
"#483F8E"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
K00vsK72.dw.pce1,
K00vsK72.dw.pce2,
"K00vsK72.down_allPCE.v2",
"Overexpressed in H9_BMP4.72h_Krendl",
"#EE82EE"
)
b <-
run.all.PCE(
K00vsK72.up.pce1,
K00vsK72.up.pce2,
"K00vsK72.up_allPCE.v2",
"Overexpressed in H9_BMP4.0h_Krendl",
"#FF1493"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
K00vsK72.dw.pce1,
K00vsK72.dw.pce2,
"K00vsK72.down_allPCE.v2",
"Overexpressed in H9_BMP4.72h_Krendl",
"#EE82EE"
)
b <-
run.all.PCE(
K00vsK72.up.pce1,
K00vsK72.up.pce2,
"K00vsK72.up_allPCE.v2",
"Overexpressed in H9_BMP4.0h_Krendl",
"#FF1493"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
UNDvsSTB.dw.pce1,
UNDvsSTB.dw.pce2,
"UNDvsSTB.down_allPCE.v2",
"Overexpressed in H1_BAP_D8_>70_Yabe",
"#598234"
)
b <-
run.all.PCE(
UNDvsSTB.up.pce1,
UNDvsSTB.up.pce2,
"UNDvsSTB.up_allPCE.v2",
"Overexpressed in H1_Yabe",
"#006400"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
K72vsSTB.dw.pce1,
K72vsSTB.dw.pce2,
"K72vsSTB.down_allPCE.v2",
"Overexpressed in H1_BAP_D8_>70_Yabe",
"#598234"
)
b <-
run.all.PCE(
K72vsSTB.up.pce1,
K72vsSTB.up.pce2,
"K72vsSTB.up_allPCE.v2",
"Overexpressed in H9_BMP4.72h_Krendl",
"#EE82EE"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
BAPvsSTB.dw.pce1,
BAPvsSTB.dw.pce2,
"BAPvsSTB.down_allPCE.v2",
"Overexpressed in H1_BAP_D8_>70_Yabe",
"#598234"
)
b <-
run.all.PCE(
BAPvsSTB.up.pce1,
BAPvsSTB.up.pce2,
"BAPvsSTB.up_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
BAPvsK72.dw.pce1,
BAPvsK72.dw.pce2,
"BAPvsK72.down_allPCE.v2",
"Overexpressed in H9_BMP4.72h_Krendl",
"#EE82EE"
)
b <-
run.all.PCE(
BAPvsK72.up.pce1,
BAPvsK72.up.pce2,
"BAPvsK72.up_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
K72vsL40.dw.pce1,
K72vsL40.dw.pce2,
"K72vsL40.down_allPCE.v2",
"Overexpressed in H1_BAP_D8_<40_Yabe",
"#AEBD38"
)
b <-
run.all.PCE(
K72vsL40.up.pce1,
K72vsL40.up.pce2,
"K72vsL40.up_allPCE.v2",
"Overexpressed in H9_BMP4.72h_Krendl",
"#EE82EE"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
a <-
run.all.PCE(
BAPvsL40.dw.pce1,
BAPvsL40.dw.pce2,
"BAPvsL40.down_allPCE.v2",
"Overexpressed in H1_BAP_D8_<40_Yabe",
"#AEBD38"
)
b <-
run.all.PCE(
BAPvsL40.up.pce1,
BAPvsL40.up.pce2,
"BAPvsL40.up_allPCE.v2",
"Overexpressed in H9_pBAP_D3_Io",
"#0571B0"
)
panel_plot <-
plot_grid(a,
b,
labels = c("A", "B"),
ncol = 1,
nrow = 2)
panel_plot
unlink("2_de-analyses_v3_cache", recursive = TRUE)
