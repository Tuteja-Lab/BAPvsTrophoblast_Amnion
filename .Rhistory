library(pheatmap)
library(ggrepel)
library(RColorBrewer)
library(plotly)
library(PCAtools)
library(scales)
library(htmlwidgets)
counts = 'assets/counts-pca-v2.txt'
groupFile = 'assets/batch-pca-v2.txt'
coldata <-
read.csv(
groupFile,
row.names = 1,
sep = "\t",
stringsAsFactors = TRUE
)
cts <- as.matrix(read.csv(counts, sep = "\t", row.names = "gene.ids"))
DT::datatable(coldata)
colnames(cts)
all(rownames(coldata) %in% colnames(cts))
cts <- cts[, rownames(coldata)]
cov1 <- as.factor(coldata$authors)
adjusted_counts <- ComBat_seq(cts, batch = cov1, group = NULL)
all(rownames(coldata) %in% colnames(cts))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = adjusted_counts,
colData = coldata,
design = ~ group)
vst <- assay(vst(dds))
p <- pca(vst, metadata = coldata, removeVar = 0.1) ##why is this needed?
vsd <- vst(dds, blind = FALSE)
pcaData <-
plotPCA(vsd,
intgroup = c("group", "authors"),
returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData
install.packages("tcR")
install.packages("immunarch")
library(immunarch)
?pca2euclid
??pca2euclid
remove.packages("immunarch", lib="~/R/win-library/4.0")
install.packages("https://cran.r-project.org/src/contrib/Archive/tcR/tcR_2.3.2.tar.gz", repo=NULL, type="source")
install.packages("stringdist")
install.packages("https://cran.r-project.org/src/contrib/Archive/tcR/tcR_2.3.2.tar.gz", repo=NULL, type="source")
library(tcR)
library(immunarch)
install.packages("immunarch")
library(sva)
library(tidyverse)
library(DESeq2)
library(vsn)
library(pheatmap)
library(ggrepel)
library(RColorBrewer)
library(reshape2)
require(biomaRt)
library(EnhancedVolcano)
library(tidytext)
library(TissueEnrich)
library(scales)
library(plyr)
setwd("~/TutejaLab/BAP.d8_analyses/additional_20210215")
load("bapd8.clusters.RData")
l <- load(file = "~/TutejaLab/PlacentaEnrich/combine-test-expression1.Rdata")
humanGeneMapping <- dataset$GRCH38$humanGeneMapping
d <- dataset$PlacentaDeciduaBloodData
data <- d$expressionData
cellDetails <- d$cellDetails
# create a run PCE function
runpce <- function(inputgenelist, filename, title) {
inputGenes<-toupper(inputgenelist)
expressionData<-data[intersect(row.names(data),humanGeneMapping$Gene),]
se<-SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)),rowData = row.names(expressionData),colData = colnames(expressionData))
cellSpecificGenesExp<-teGeneRetrieval(se,expressedGeneThreshold = 1)
print(length(inputGenes))
gs<-GeneSet(geneIds=toupper(inputGenes))
output2<-teEnrichmentCustom(gs,cellSpecificGenesExp)
enrichmentOutput<-setNames(data.frame(assay(output2[[1]]),row.names = rowData(output2[[1]])[,1]),colData(output2[[1]])[,1])
row.names(cellDetails)<-cellDetails$RName
enrichmentOutput$Tissue<- cellDetails[row.names(enrichmentOutput),"CellName"]
write_delim(enrichmentOutput, file=paste0(filename, "_data.tsv"), delim = "\t")
p <- ggplot(data = enrichmentOutput, mapping = aes(x = reorder (Tissue, -Log10PValue), Log10PValue, fill= Tissue)) +
geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14, face="bold")) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
ggtitle(title) + ylab("-log10 p-value")
ggsave(filename, dpi=900, width = 10, height = 8)
}
runpce(markers.filtered.names.5, "cluster5_old.svg", "Cluster 5")
setwd("~/github/BAPvsTrophoblast_Amnion")
l <-
load(file = "assets/combine-test-expression1.Rdata")
humanGeneMapping <- dataset$GRCH38$humanGeneMapping
d <- dataset$PlacentaDeciduaBloodData
data <- d$expressionData
cellDetails <- d$cellDetails
# Xiang et al., dataset
te.dataset.xiang <- readRDS("assets/te.dataset.xiang.rds")
# Castel et al., dataset
te.dataset.castel <- readRDS("assets/te.dataset.castel.rds")
# full names for cell types
xi.md <-
read.csv(
"assets/md-xi.tsv",
sep = "\t",
header = TRUE,
row.names = 1
)
vt.md <-
read.csv(
"assets/md-vt.tsv",
sep = "\t",
header = TRUE,
row.names = 1
)
zp.md <-
read.csv(
"assets/md-zp.tsv",
sep = "\t",
header = TRUE,
row.names = 1
)
setwd("~/TutejaLab/BAP.d8_analyses/additional_20210215")
runpce <- function(inputgenelist, filename, title) {
inputGenes<-toupper(inputgenelist)
expressionData<-data[intersect(row.names(data),humanGeneMapping$Gene),]
se<-SummarizedExperiment(assays = SimpleList(as.matrix(expressionData)),rowData = row.names(expressionData),colData = colnames(expressionData))
cellSpecificGenesExp<-teGeneRetrieval(se,expressedGeneThreshold = 1)
print(length(inputGenes))
gs<-GeneSet(geneIds=toupper(inputGenes))
output2<-teEnrichmentCustom(gs,cellSpecificGenesExp)
enrichmentOutput<-setNames(data.frame(assay(output2[[1]]),row.names = rowData(output2[[1]])[,1]),colData(output2[[1]])[,1])
row.names(cellDetails)<-cellDetails$RName
enrichmentOutput$Tissue<- cellDetails[row.names(enrichmentOutput),"CellName"]
write_delim(enrichmentOutput, file=paste0(filename, "_data.tsv"), delim = "\t")
p <- ggplot(data = enrichmentOutput, mapping = aes(x = reorder (Tissue, -Log10PValue), Log10PValue, fill= Tissue)) +
geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14, face="bold")) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
ggtitle(title) + ylab("-log10 p-value")
ggsave(filename, dpi=900, width = 10, height = 8)
}
runpce2 <- function(inputgenelist, filename, title) {
gs<-GeneSet(unique(inputgenelist))
output2<-teEnrichmentCustom(gs,te.dataset.castel)
enrichmentOutput<-setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
enrichmentOutput$Tissue <- rownames(enrichmentOutput)
write_delim(enrichmentOutput, file=paste0(filename, "_data.tsv"), delim = "\t")
p <- ggplot(data = enrichmentOutput, mapping = aes(x = reorder (Tissue, -Log10PValue), Log10PValue, fill= Tissue)) +
geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14, face="bold")) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
ggtitle(title) + ylab("-log10 p-value")
ggsave(filename, dpi=900, width = 10, height = 8)
}
runpce3 <- function(inputgenelist, filename, title) {
gs<-GeneSet(unique(inputgenelist))
output2<-teEnrichmentCustom(gs,te.dataset.xiang)
enrichmentOutput<-setNames(data.frame(assay(output2[[1]]), row.names = rowData(output2[[1]])[,1]), colData(output2[[1]])[,1])
enrichmentOutput$Tissue <- rownames(enrichmentOutput)
write_delim(enrichmentOutput, file=paste0(filename, "_data.tsv"), delim = "\t")
p <- ggplot(data = enrichmentOutput, mapping = aes(x = reorder (Tissue, -Log10PValue), Log10PValue, fill= Tissue)) +
geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 12),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100), legend.position = "none",
plot.title = element_text(color = "black", size=18, face="bold.italic"),
axis.title.x = element_blank(),
axis.title.y = element_text(color="black", size=14, face="bold")) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
ggtitle(title) + ylab("-log10 p-value")
ggsave(filename, dpi=900, width = 10, height = 8)
}
mart <- read.csv("~/TutejaLab/amnion_for_ms_20210715/de-analyses_rev/mart-genes.tsv", sep="\t", stringsAsFactors = TRUE, header = TRUE)
runpce2(markers.filtered.names.5, "Cluster_5_PCE-ZP.svg", "Cluster_5")
runpce2(markers.filtered.names.6, "Cluster_6_PCE-ZP.svg", "Cluster_6")
runpce3(markers.filtered.names.6, "Cluster_6_PCE-Xiang.svg", "Cluster_6")
runpce3(markers.filtered.names.5, "Cluster_5_PCE-Xiang.svg", "Cluster_5")
symbols.to.ensembl <- function(genesymbols) {
newlist <- paste0(deparse(substitute(genesymbols)), ".ensids")
temp <- annot[annot$external_gene_name %in% genesymbols,]
temp <- temp[c(2,3)]
assign(newlist, temp, envir = .GlobalEnv)
}
symbols.to.ensembl(markers.filtered.names.1)
symbols.to.ensembl(markers.filtered.names.2)
symbols.to.ensembl(markers.filtered.names.3)
symbols.to.ensembl(markers.filtered.names.4)
symbols.to.ensembl(markers.filtered.names.5)
symbols.to.ensembl(markers.filtered.names.6)
symbols.to.ensembl(markers.filtered.names.7)
symbols.to.ensembl(markers.filtered.names.8)
symbols.to.ensembl(markers.filtered.names.9)
symbols.to.ensembl(markers.filtered.names.10)
symbols.to.ensembl(markers.filtered.names.11)
symbols.to.ensembl(markers.filtered.names.12)
symbols.to.ensembl(markers.filtered.names.13)
ensembl = useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl) %>%
filter(str_detect(description, "Human"))
ensembl = useDataset("hsapiens_gene_ensembl", mart = ensembl)
listFilters(ensembl) %>%
filter(str_detect(name, "ensembl"))
filterType <- "ensembl_gene_id_version"
filterValues <- rownames(cts)
listAttributes(ensembl) %>%
head(20)
attributeNames <- c('ensembl_gene_id_version',
'ensembl_gene_id',
'external_gene_name')
annot <- getBM(
attributes = attributeNames,
filters = filterType,
values = filterValues,
mart = ensembl
)
isDup <- duplicated(annot$ensembl_gene_id)
dup <- annot$ensembl_gene_id[isDup]
annot <- annot[!annot$ensembl_gene_id %in% dup, ]
runpce <- function(geneList1, geneList2, filename, barcolor) {
expressionData <-
data[intersect(row.names(data), humanGeneMapping$Gene),]
se <-
SummarizedExperiment(
assays = SimpleList(as.matrix(expressionData)),
rowData = row.names(expressionData),
colData = colnames(expressionData)
)
cellSpecificGenesExp <-
teGeneRetrieval(se, expressedGeneThreshold = 1)
print(length(geneList1))
gs.vt <- GeneSet(geneIds = toupper(geneList1))
output.vt <- teEnrichmentCustom(gs.vt, cellSpecificGenesExp)
en.output.vt <-
setNames(data.frame(assay(output.vt[[1]]), row.names = rowData(output.vt[[1]])[, 1]),
colData(output.vt[[1]])[, 1])
row.names(cellDetails) <- cellDetails$RName
en.output.vt$Tissue <-
cellDetails[row.names(en.output.vt), "CellName"]
gs <- GeneSet(unique(geneList2))
output.xi <- teEnrichmentCustom(gs, te.dataset.xiang)
output.zp <- teEnrichmentCustom(gs, te.dataset.castel)
en.output.xi <-
setNames(data.frame(assay(output.xi[[1]]), row.names = rowData(output.xi[[1]])[, 1]),
colData(output.xi[[1]])[, 1])
en.output.xi$Tissue <- rownames(en.output.xi)
en.output.zp <-
setNames(data.frame(assay(output.zp[[1]]), row.names = rowData(output.zp[[1]])[, 1]),
colData(output.zp[[1]])[, 1])
en.output.zp$Tissue <- rownames(en.output.zp)
en.output.zp$source <- "ZP"
en.output.zp <- en.output.zp[order(-en.output.zp$Log10PValue), ]
en.output.zp <-
merge(en.output.zp, zp.md, by = "row.names", all.x = TRUE)
en.output.zp <- rownames_to_column(en.output.zp, var = "Name")
en.output.vt$source <- "VT"
en.output.vt <- en.output.vt[order(-en.output.vt$Log10PValue), ]
en.output.vt <-
merge(en.output.vt, vt.md, by = "row.names", all.x = TRUE)
en.output.vt <- rownames_to_column(en.output.vt, var = "Name")
en.output.xi$source <- "Xi"
en.output.xi <- en.output.xi[order(-en.output.xi$Log10PValue), ]
en.output.xi <-
merge(en.output.xi, xi.md, by = "row.names", all.x = TRUE)
en.output.xi <- rownames_to_column(en.output.xi, var = "Name")
en.conbined <- rbind(en.output.vt, en.output.xi, en.output.zp)
p <- 0.05
logp <- -log10(p)
en.conbined <-  en.conbined %>%
mutate(Log10PValue = replace(Log10PValue, Log10PValue < logp, 0))
en.conbined %>%
group_by(source) %>%
arrange(source, desc(Log10PValue)) %>% dplyr::slice(1:7)  %>%
ungroup %>%
mutate(
source = as.factor(source),
CellNames = tidytext::reorder_within(CellNames, Log10PValue, source, sep = ":")
) %>%
ggplot(aes(CellNames, Log10PValue)) + geom_bar(stat = 'identity', fill = barcolor) +  theme_minimal() +
theme(
axis.text.x = element_text(
vjust = 1,
hjust = 1,
size = 12
),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100),
legend.position = "none",
plot.title = element_text(
color = "black",
size = 18,
face = "bold.italic"
),
axis.title.y = element_blank(),
axis.line.x = element_line(
colour = 'black',
size = 0.5,
linetype = 'solid'
),
axis.ticks.x = element_line(
colour = 'black',
size = 1,
linetype = 'solid'
),
axis.title.x = element_text(
color = "black",
size = 14,
face = "bold"
)
)  +
scale_y_continuous(expand = expansion(mult = c(0, .1)), breaks = pretty_breaks()) +
facet_wrap(~ source, scales = "free", ncol = 3) +
coord_flip()
}
ensembl = useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl) %>%
filter(str_detect(description, "Human"))
ensembl = useDataset("hsapiens_gene_ensembl", mart = ensembl)
listFilters(ensembl) %>%
filter(str_detect(name, "ensembl"))
filterType <- "ensembl_gene_id_version"
cts <- as.matrix(read.csv('assets/counts-subset-v5.txt', sep = "\t", row.names = "gene.ids"))
filterValues <- rownames(cts)
listAttributes(ensembl) %>%
head(20)
attributeNames <- c('ensembl_gene_id_version',
'ensembl_gene_id',
'external_gene_name')
annot <- getBM(
attributes = attributeNames,
filters = filterType,
values = filterValues,
mart = ensembl
)
isDup <- duplicated(annot$ensembl_gene_id)
dup <- annot$ensembl_gene_id[isDup]
annot <- annot[!annot$ensembl_gene_id %in% dup, ]
setwd("~/github/amnion.vs.other_RNASeq")
setwd("~/github/BAPvsTrophoblast_Amnion")
ensembl = useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl) %>%
filter(str_detect(description, "Human"))
ensembl = useDataset("hsapiens_gene_ensembl", mart = ensembl)
listFilters(ensembl) %>%
filter(str_detect(name, "ensembl"))
filterType <- "ensembl_gene_id_version"
cts <- as.matrix(read.csv('assets/counts-subset-v5.txt', sep = "\t", row.names = "gene.ids"))
filterValues <- rownames(cts)
listAttributes(ensembl) %>%
head(20)
attributeNames <- c('ensembl_gene_id_version',
'ensembl_gene_id',
'external_gene_name')
annot <- getBM(
attributes = attributeNames,
filters = filterType,
values = filterValues,
mart = ensembl
)
isDup <- duplicated(annot$ensembl_gene_id)
dup <- annot$ensembl_gene_id[isDup]
annot <- annot[!annot$ensembl_gene_id %in% dup, ] #this object will be saved and used later
symbols.to.ensembl <- function(genesymbols) {
newlist <- paste0(deparse(substitute(genesymbols)), ".ensids")
temp <- annot[annot$external_gene_name %in% genesymbols,]
temp <- temp[c(2,3)]
assign(newlist, temp, envir = .GlobalEnv)
}
symbols.to.ensembl(makers.filtered.names.1)
symbols.to.ensembl(makers.filtered.names.2)
symbols.to.ensembl(makers.filtered.names.3)
symbols.to.ensembl(makers.filtered.names.4)
symbols.to.ensembl(makers.filtered.names.5)
symbols.to.ensembl(makers.filtered.names.6)
symbols.to.ensembl(makers.filtered.names.7)
symbols.to.ensembl(makers.filtered.names.8)
symbols.to.ensembl(makers.filtered.names.9)
symbols.to.ensembl(markers.filtered.names.1)
symbols.to.ensembl(markers.filtered.names.2)
symbols.to.ensembl(markers.filtered.names.3)
symbols.to.ensembl(markers.filtered.names.4)
symbols.to.ensembl(markers.filtered.names.5)
symbols.to.ensembl(markers.filtered.names.6)
symbols.to.ensembl(markers.filtered.names.7)
symbols.to.ensembl(markers.filtered.names.8)
symbols.to.ensembl(markers.filtered.names.9)
pce <- runpce(cluster.marker.names.1.ensids$ensembl_gene_id, cluster.marker.names.1, "Cluster_1_allPCE", color_list[1])
pce <- runpce(markers.filtered.names.1.ensids$ensembl_gene_id, markers.filtered.names.1, "Cluster_1_allPCE", color_list[1])
ggplotColours <- function(n = 6, h = c(0, 360) + 15) {
if ((diff(h) %% 360) < 1)
h[2] <- h[2] - 360 / n
hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
color_list <- ggplotColours(n = 9)
pce <- runpce(markers.filtered.names.1.ensids$ensembl_gene_id, markers.filtered.names.1, "Cluster_1_allPCE", color_list[1])
pce
pce <- runpce(markers.filtered.names.2.ensids$ensembl_gene_id, markers.filtered.names.2, "Cluster_2_allPCE", color_list[2])
pce
runpce <- function(geneList1, geneList2, filename, barcolor) {
expressionData <-
data[intersect(row.names(data), humanGeneMapping$Gene),]
se <-
SummarizedExperiment(
assays = SimpleList(as.matrix(expressionData)),
rowData = row.names(expressionData),
colData = colnames(expressionData)
)
cellSpecificGenesExp <-
teGeneRetrieval(se, expressedGeneThreshold = 1)
print(length(geneList1))
gs.vt <- GeneSet(geneIds = toupper(geneList1))
output.vt <- teEnrichmentCustom(gs.vt, cellSpecificGenesExp)
en.output.vt <-
setNames(data.frame(assay(output.vt[[1]]), row.names = rowData(output.vt[[1]])[, 1]),
colData(output.vt[[1]])[, 1])
row.names(cellDetails) <- cellDetails$RName
en.output.vt$Tissue <-
cellDetails[row.names(en.output.vt), "CellName"]
gs <- GeneSet(unique(geneList2))
output.xi <- teEnrichmentCustom(gs, te.dataset.xiang)
output.zp <- teEnrichmentCustom(gs, te.dataset.castel)
en.output.xi <-
setNames(data.frame(assay(output.xi[[1]]), row.names = rowData(output.xi[[1]])[, 1]),
colData(output.xi[[1]])[, 1])
en.output.xi$Tissue <- rownames(en.output.xi)
en.output.zp <-
setNames(data.frame(assay(output.zp[[1]]), row.names = rowData(output.zp[[1]])[, 1]),
colData(output.zp[[1]])[, 1])
en.output.zp$Tissue <- rownames(en.output.zp)
en.output.zp$source <- "ZP"
en.output.zp <- en.output.zp[order(-en.output.zp$Log10PValue), ]
en.output.zp <-
merge(en.output.zp, zp.md, by = "row.names", all.x = TRUE)
en.output.zp <- rownames_to_column(en.output.zp, var = "Name")
en.output.vt$source <- "VT"
en.output.vt <- en.output.vt[order(-en.output.vt$Log10PValue), ]
en.output.vt <-
merge(en.output.vt, vt.md, by = "row.names", all.x = TRUE)
en.output.vt <- rownames_to_column(en.output.vt, var = "Name")
en.output.xi$source <- "Xi"
en.output.xi <- en.output.xi[order(-en.output.xi$Log10PValue), ]
en.output.xi <-
merge(en.output.xi, xi.md, by = "row.names", all.x = TRUE)
en.output.xi <- rownames_to_column(en.output.xi, var = "Name")
en.conbined <- rbind(en.output.vt, en.output.xi, en.output.zp)
p <- 0.05
logp <- -log10(p)
en.conbined <-  en.conbined %>%
group_by(source) %>%
arrange(source, desc(Log10PValue)) %>% dplyr::slice(1:7)  %>%
ungroup %>%
mutate(
source = as.factor(source),
CellNames = tidytext::reorder_within(CellNames, Log10PValue, source, sep = ":")
) %>%
ggplot(aes(CellNames, Log10PValue)) + geom_bar(stat = 'identity', fill = barcolor) +  theme_minimal() +
theme(
axis.text.x = element_text(
vjust = 1,
hjust = 1,
size = 12
),
axis.text.y = element_text(size = 12),
plot.margin = margin(10, 10, 10, 100),
legend.position = "none",
plot.title = element_text(
color = "black",
size = 18,
face = "bold.italic"
),
axis.title.y = element_blank(),
axis.line.x = element_line(
colour = 'black',
size = 0.5,
linetype = 'solid'
),
axis.ticks.x = element_line(
colour = 'black',
size = 1,
linetype = 'solid'
),
axis.title.x = element_text(
color = "black",
size = 14,
face = "bold"
)
)  +
scale_y_continuous(expand = expansion(mult = c(0, .1)), breaks = pretty_breaks()) +
facet_wrap(~ source, scales = "free", ncol = 3) +
coord_flip()
}
pce <- runpce(markers.filtered.names.2.ensids$ensembl_gene_id, markers.filtered.names.2, "Cluster_2_allPCE", color_list[2])
pce
pce <- runpce(markers.filtered.names.1.ensids$ensembl_gene_id, markers.filtered.names.1, "Cluster_1_allPCE", color_list[1])
pce
