factor(annotation$Condition,
levels = data.to.plot)
annotation
metadata <- coldata %>%
rownames_to_column(var = "condition") %>%
select(condition, group)
annotation <- merge(
annotation,
metadata,
by.x = "Condition",
by.y = "condition",
all.x = TRUE,
all.y = FALSE
)
annotation
annotation <- annotation %>%
arrange(levels = Condition)
hmap.data <-
as.matrix(norm.filtered.subset.table[, data.to.plot])
hmap.data
pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
annotation_col = annotation,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle)
g <- pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T)
g
hmap.data
pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
annotation_col = annotation)
annotation
colnames(annotation) <- c("Condition", "sample")
hmap.data
g <- pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
annotation_col = annotation,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
?pheatmap
g <- pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
annotation_col = annotation$Condition,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
g
all(annotation$Condition %in% colnames(hmap.data))
annotation$Condition
colnames(hmap.data)
pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
runheatmap <-
function(get_table = table,
filename = "test_name",
num = 20,
data.to.plot = name1,
ChartTitle = "Title") {
norm.filtered.subset.long <- get_table
norm.filtered.subset.table <-
dcast(norm.filtered.subset.long,
external_gene_name ~ condition,
value.var = "norm.expression")
write_delim(
norm.filtered.subset.table,
file = paste0(filename, "_expValues.tsv"),
delim = "\t"
)
norm.filtered.subset.table <-
norm.filtered.subset.table %>% column_to_rownames("external_gene_name")
annotation <- data.frame(Condition = colnames(norm.filtered.subset.table))
heat_colors <- brewer.pal(9, "YlOrRd")
rownames(annotation) <- colnames(norm.filtered.subset.table)
annotation$Condition <-
factor(annotation$Condition,
levels = data.to.plot)
metadata <- coldata %>%
rownames_to_column(var = "condition") %>%
select(condition, group)
annotation <- merge(
annotation,
metadata,
by.x = "Condition",
by.y = "condition",
all.x = TRUE,
all.y = FALSE
)
colnames(annotation) <- c("Condition", "sample")
annotation <- annotation %>%
arrange(levels = Condition)
hmap.data <-
as.matrix(norm.filtered.subset.table[, data.to.plot])
g <- pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
g
}
runheatmap(amnion.roost.new.main.info, data.to.plot = name1)
pheatmap()
pheatmap(hmap.data)
dev.off()
pheatmap(hmap.data)
runheatmap(amnion.roost.new.main.info, data.to.plot = name1)
dev.off()
runheatmap(amnion.roost.new.main.info, data.to.plot = name1)
runheatmap <-
function(get_table = table,
filename = "test_name",
num = 20,
data.to.plot = name1,
ChartTitle = "Title") {
norm.filtered.subset.long <- get_table
norm.filtered.subset.table <-
dcast(norm.filtered.subset.long,
external_gene_name ~ condition,
value.var = "norm.expression")
write_delim(
norm.filtered.subset.table,
file = paste0(filename, "_expValues.tsv"),
delim = "\t"
)
norm.filtered.subset.table <-
norm.filtered.subset.table %>% column_to_rownames("external_gene_name")
annotation <- data.frame(Condition = colnames(norm.filtered.subset.table))
heat_colors <- brewer.pal(9, "YlOrRd")
rownames(annotation) <- colnames(norm.filtered.subset.table)
annotation$Condition <-
factor(annotation$Condition,
levels = data.to.plot)
metadata <- coldata %>%
rownames_to_column(var = "condition") %>%
select(condition, group)
annotation <- merge(
annotation,
metadata,
by.x = "Condition",
by.y = "condition",
all.x = TRUE,
all.y = FALSE
)
colnames(annotation) <- c("Condition", "sample")
annotation <- annotation %>%
arrange(levels = Condition)
hmap.data <-
as.matrix(norm.filtered.subset.table[, data.to.plot])
g <- pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
annotation_col = annotation,
show_rownames = T,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
g
}
runheatmap(amnion.roost.new.main.info, data.to.plot = name1)
runheatmap <-
function(get_table = table,
filename = "test_name",
num = 20,
data.to.plot = name1,
ChartTitle = "Title") {
norm.filtered.subset.long <- get_table
norm.filtered.subset.table <-
dcast(norm.filtered.subset.long,
external_gene_name ~ condition,
value.var = "norm.expression")
write_delim(
norm.filtered.subset.table,
file = paste0(filename, "_expValues.tsv"),
delim = "\t"
)
norm.filtered.subset.table <-
norm.filtered.subset.table %>% column_to_rownames("external_gene_name")
annotation <- data.frame(Condition = colnames(norm.filtered.subset.table))
heat_colors <- brewer.pal(9, "YlOrRd")
hmap.data <-
as.matrix(norm.filtered.subset.table[, data.to.plot])
g <- pheatmap(
hmap.data,
color = heat_colors,
main = ChartTitle,
cluster_rows = F,
cluster_cols  = F,
show_rownames = T,
border_color = NA,
fontsize = 14,
scale = "row",
fontsize_row = 10
)
g
}
runheatmap(amnion.roost.new.main.info, data.to.plot = name1)
runheatmap(amnion.roost.new.main.info, data.to.plot = name1, ChartTitle = "New amnion markers - expression across samples")
runheatmap(amnion.roost.new.main.info, data.to.plot = name1, num = 38, ChartTitle = "New amnion markers - expression across samples")
corPlot(amnion.roost.new.main.info)
normTestEach(amnion.roost.new.main.info)
normTestAll(amnion.roost.new.main.info)
shapiro.each <- amnion.roost.new1 %>% dplyr::group_by(condition) %>% shapiro_test(norm.expression)
shapiro.each <- amnion.roost.new.main.info %>% dplyr::group_by(condition) %>% shapiro_test(norm.expression)
DT::datatable(shapiro.each)
amnion.roost.new.main.info %>%  shapiro_test(norm.expression)
amnion.roost.new.main.info
library(nortest)
install.packages("nortest")
library(nortest)
amnion.roost.new.main.info %>%  ad.test(norm.expression)
ad.test(amnion.roost.new.main.info$norm.expression)
shapiro.test(amnion.roost.new.main.info$norm.expression)
shapiro.test(amnion.roost.new.main.info$norm.expression[0:5000])
dim(amnion.roost.new.main.info)
shapiro.test(amnion.roost.new.main.info$norm.expression[0:5001])
shapiro.test(amnion.roost.new.main.info$norm.expression[0:5000])
kruskal.test(norm.expression ~ sample, data = amnion.roost.new2)
kruskal.test(norm.expression ~ sample, data = amnion.roost.new.main.info)
head(amnion.roost.new.main.info)
kruskal.test(norm.expression ~ group, data = amnion.roost.new.main.info)
dunnTest <- dunnTest(norm.expression ~ group, data=amnion.roost.new.main.info, method="bh")
g <- as.data.frame(dunnTest$res)
DT::datatable(g)
vlnPlot(amnion.roost.new.main.info)
vlnPlot <- function(info_table = Infotable) {
norm.filtered.subset.long <- info_table
ggplot(data = norm.filtered.subset.long,
aes(x = group, y = norm.expression, fill = group)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 0.8,
trim = FALSE) +
geom_point(
aes(y = norm.expression, color = group),
position = position_jitter(width = 0.15),
size = 1,
alpha = 0.5
) +
geom_boxplot(width = 0.2,
outlier.shape = NA,
alpha = 0.8) + stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 2
) +
labs(y = "\nNormalized Expression", x = NULL) +
guides(fill = "none", color = "none") +
scale_y_log10() +
scale_fill_manual(values = c("#F3766E", "#81AE40", "#0571B0", "#EE82EE", "#598234")) +
scale_colour_manual(values = c("#F3766E", "#81AE40", "#0571B0", "#EE82EE", "#598234")) +
theme_niwot()
}
vlnPlot(amnion.roost.new.main.info)
vlnPlot <- function(info_table = Infotable) {
norm.filtered.subset.long <- info_table
ggplot(data = norm.filtered.subset.long,
aes(x = group, y = norm.expression, fill = group)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 0.8,
trim = FALSE) +
geom_point(
aes(y = norm.expression, color = group),
position = position_jitter(width = 0.15),
size = 1,
alpha = 0.5
) +
geom_boxplot(width = 0.2,
outlier.shape = NA,
alpha = 0.8) + stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 2
) +
labs(y = "\nNormalized Expression", x = NULL) +
guides(fill = "none", color = "none") +
scale_y_log10()  +
theme_niwot()
}
vlnPlot(amnion.roost.new.main.info)
head(norm.filtered.subset.long)
head(norm.filtered.subset.long$group)
head(amnion.roost.new.main.info)
amnion.roost.new.main.info$group
levels(amnion.roost.new.main.info$group)
coldata
metadata <- coldata %>%
rownames_to_column(var = "condition") %>%
select(condition, group)
metadata
head(metadata, 60)
tail(metadata)
View(metadata)
sub("^(amnion_).*w", "", metadata$group)
sub("^(amnion_).*w", "Amnion", metadata$group)
metadata <- sub("^(amnion_).*w", "Amnion", metadata$group)
metadata <- coldata %>%
rownames_to_column(var = "condition") %>%
select(condition, group)
metadata$group <- sub("^(amnion_).*w", "Amnion", metadata$group)
metadata$group <- sub("^(CT_7|CT_9|CT_11)wk", "CT", metadata$group)
addSampleInfo <- function(get_table = table) {
norm.filtered.subset.long <- get_table
metadata <- coldata %>%
rownames_to_column(var = "condition") %>%
select(condition, group)
metadata$group <- sub("^(amnion_).*w", "Amnion", metadata$group)
metadata$group <- sub("^(CT_7|CT_9|CT_11)wk", "CT", metadata$group)
norm.filtered.subset.long <- merge(
norm.filtered.subset.long,
metadata,
by.x = "condition",
by.y = "condition",
all.x = TRUE,
all.y = FALSE
)
norm.filtered.subset.long
}
amnion.roost.new.main <- getTable.main(amnion.roost.names, name1)
amnion.roost.old.main <- getTable.main(fig6b, name1)
amnion.monkey.main    <- getTable.main(monkey, name1)
amnion.roost.new.supp <- getTable.main(amnion.roost.names, name2)
amnion.roost.old.supp <- getTable.main(fig6b, name2)
amnion.monkey.supp    <- getTable.main(monkey, name2)
amnion.roost.new.main.info <- addSampleInfo(amnion.roost.new.main)
amnion.roost.old.main.info <- addSampleInfo(amnion.roost.old.main)
amnion.monkey.main.info    <- addSampleInfo(amnion.monkey.main)
amnion.roost.new.supp.info <- addSampleInfo(amnion.roost.new.supp)
amnion.roost.old.supp.info <- addSampleInfo(amnion.roost.old.supp)
amnion.monkey.supp.info    <- addSampleInfo(amnion.monkey.supp)
runheatmap(amnion.roost.new.main.info, data.to.plot = name1, num = 38, ChartTitle = "New amnion markers - expression across samples")
corPlot(amnion.roost.new.main.info)
normTestEach(amnion.roost.new.main.info)
normTestAll(amnion.roost.new.main.info)
shapiro.each <- amnion.roost.new.main.info %>% dplyr::group_by(condition) %>% shapiro_test(norm.expression)
DT::datatable(shapiro.each, )
shapiro.test(amnion.roost.new.main.info$norm.expression[0:5000])
kruskal.test(norm.expression ~ group, data = amnion.roost.new.main.info)
dunnTest <- dunnTest(norm.expression ~ group, data=amnion.roost.new.main.info, method="bh")
g <- as.data.frame(dunnTest$res)
DT::datatable(g)
vlnPlot(amnion.roost.new.main.info)
vlnPlot <- function(info_table = Infotable) {
norm.filtered.subset.long <- info_table
ggplot(data = norm.filtered.subset.long,
aes(x = group, y = norm.expression, fill = group)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 0.8,
trim = FALSE) +
geom_point(
aes(y = norm.expression, color = group),
position = position_jitter(width = 0.15),
size = 1,
alpha = 0.5
) +
geom_boxplot(width = 0.2,
outlier.shape = NA,
alpha = 0.8) + stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 2
) +
labs(y = "\nNormalized Expression", x = NULL) +
guides(fill = "none", color = "none") +
scale_y_log10()  +
theme_niwot() + theme(axis.text.x = element_text(
angle = 45,
vjust = 1,
hjust = 1
))
}
vlnPlot(amnion.roost.new.main.info)
runheatmap(amnion.roost.old.main.info, data.to.plot = name1, num = 20, ChartTitle = "Io amnion markers - expression across samples")
corPlot(amnion.roost.old.main.info)
normTestEach(amnion.roost.old.main.info)
normTestAll(amnion.roost.old.main.info)
shapiro.each <- amnion.roost.old.main.info %>% dplyr::group_by(condition) %>% shapiro_test(norm.expression)
DT::datatable(shapiro.each, )
shapiro.test(amnion.roost.old.main.info$norm.expression[0:5000])
kruskal.test(norm.expression ~ group, data = amnion.roost.old.main.info)
dunnTest <- dunnTest(norm.expression ~ group, data=amnion.roost.old.main.info, method="bh")
g <- as.data.frame(dunnTest$res)
DT::datatable(g)
vlnPlot(amnion.roost.old.main.info)
vlnPlot(amnion.roost.new.supp.info)
vlnPlot(amnion.roost.old.supp.info)
runheatmap(amnion.roost.old.supp.info, data.to.plot = name1, num = 20, ChartTitle = "Io amnion markers - expression across samples")
runheatmap(amnion.roost.old.supp.info, data.to.plot = name2, num = 20, ChartTitle = "Io amnion markers - expression across samples")
corPlot(amnion.roost.old.supp.info)
normTestEach(amnion.roost.old.supp.info)
normTestAll(amnion.roost.old.supp.info)
shapiro.each <- amnion.roost.old.supp.info %>% dplyr::group_by(condition) %>% shapiro_test(norm.expression)
DT::datatable(shapiro.each, )
shapiro.test(amnion.roost.old.supp.info$norm.expression[0:5000])
kruskal.test(norm.expression ~ group, data = amnion.roost.old.supp.info)
dunnTest <- dunnTest(norm.expression ~ group, data=amnion.roost.old.supp.info, method="bh")
g <- as.data.frame(dunnTest$res)
DT::datatable(g)
vlnPlot(amnion.roost.old.supp.info)
runheatmap(amnion.roost.new.supp.info, data.to.plot = name2, num = 20, ChartTitle = "Io amnion markers - expression across samples")
corPlot(amnion.roost.new.supp.info)
unlink('4_heatmaps_v2_cache', recursive = TRUE)
trace(corrplot, edit=TRUE)
trace(corrplot)
unlockBinding("corrplot", as.environment("package:corrplot"))
assign("corrplot ", my.corrplot , as.environment("package:corrplot"))
assign("corrplot", my.corrplot , as.environment("package:corrplot"))
assign("my.corrplot", corrplot , as.environment("package:corrplot"))
my.corrplot <- corrplot::corrplot
my.corrplot
dump(my.corrplot, file="myCorrPlot.R")
dump("my.corrplot", file="myCorrPlot.R")
corPlot <- function(get_table = table,
ChartTitle = "Title") {
norm.filtered.subset.long <- get_table
norm.filtered.subset.table <-
dcast(norm.filtered.subset.long,
external_gene_name ~ condition,
value.var = "norm.expression")
temp <- norm.filtered.subset.table[, -1]
row.names(temp) <- norm.filtered.subset.table[, 1]
norm.filtered.subset.table <- temp
pcor <-
cor(as.matrix(norm.filtered.subset.table), method = "spearman")
p.mat <- cor.mtest(as.matrix(norm.filtered.subset.table))
col <-
colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
my.corrplot(
pcor,
method = "color",
col = col(200),
type = "upper",
order = "hclust",
addCoef.col = "darkorchid",
pch.cex = 1.5,
p.mat = p.mat,
insig = 'label_sig',
sig.level = c(0.001, 0.01, 0.05),
tl.col = "black",
tl.srt = 45,
number.cex = 0.8,
tl.cex = 1,
pch.col = "tomato",
diag = FALSE,
font.main = 4,
mar = c(0, 0, 1, 0)
)
}
save(my.corrplot, file="myCorrplot.Rdata")
trace(my.corrplot, edit = TRUE)
save(my.corrplot, file="assets/myCorrplot.Rdata")
unlink('4_heatmaps_v2_cache', recursive = TRUE)
